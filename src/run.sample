#!/bin/bash
exec /u/nlp/packages/scala/scala-2.11.0/bin/scala -cp /u/nlp/packages/qry/lib/qry.jar:$JAVANLP_HOME/projects/core/classes:$JAVANLP_HOME/projects/more/classes:$JAVANLP_HOME/projects/more/lib/typesafe-config-1.0.0.jar:$JAVANLP_HOME/projects/research/classes "$0" "$@"
!#
import Qry._  // Qry Core
import Stanford._  // Utilities for Stanford

/* Run dir */
//using("/path/to/directory")

/* PBS */
//using("pbs")
PBS.name     = main.substring(main.lastIndexOf(".") + 1).replace(" ", "_")
PBS.queue    = Queue.NLP  // {SCAIL, NLP, JAG, JOHN}; or you can set it as a string with `PBS.queue = "nlp"`
PBS.priority = Priority.NORMAL  // {HIGH, NORMAL, BACKGROUND, PREEMPTABLE }
PBS.cores    = 1
PBS.memory   = memory  // For Java jobs, memory is also auto detected

/* Java */
val java:List[String] = ("java"
  -('cp, List(cp, JAVANLP, JAVANLP_LIBS).mkString(":"))
	-("Xmx" + memory.replaceAll("b$",""))
	-"Xss16m"
  -"XX:MaxPermSize=64M"
	-'server
  -'ea
  ->guessClassOrElse(args, main)).toList  // Tries to guess the main class from the command line arguments too

/* Typesafe Config */
//using(getConfigOr(args, "/path/to/typesafe/config.conf"))  // tries to guess the config path from the command line arguments too

/* Configure Java */
def memory = "2gb"  // The memory for your Java job
def main = "edu.stanford.nlp.pipeline.StanfordCoreNLP"  // The Java main class
def cp = ""  // Additional (non-JavaNLP) classpath for your run

/* Parallelism */
//parallel(<# cores>)

/* Program */
submit(java
  -("log.file", touch("redwood.log"))
)



